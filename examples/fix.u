let fix : (A:Type) -> (A -> A) -> A
        = \A:Type. \f:A->A. let x:A = f x in x
  
  ; Pair : (A:Type) -> (B:Type) -> Type
         = \A:Type. \B:Type. (C:Type) -> (A -> B -> C) -> C
  ; pair : (A:Type) -> (B:Type) -> (a:A) -> (b:B) -> Pair A B
         = \A:Type. \B:Type. \a:A. \b:B. \C:Type. \cc:A->B->C. cc a b

  ; tagf : Type -> 1 -> Type
         = \A:Type. \tag:1. !case tag => \tag:1. $Type of { [A] }
  ; Box : Type -> Type
        = \A:Type. (tag:1) -> tagf A tag
  ; box : (A:Type) -> A -> Box A
        = \A:Type. \x:A. \tag:1. case tag => tagf A of { x }

  ; Stream : Type -> Type
           = \A:Type. fix Type (\S:Type. Pair A (Box S))
  ; zeros : Stream 1
          = fix (Stream 1) (\s:Stream 1. pair 1 (Box (Stream 1)) (0:1) (box (Stream 1) s))
in zeros
